#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
from dynamic_reconfigure.parameter_generator_catkin import (
    bool_t, int_t, double_t, str_t, ParameterGenerator)

"""
.. codeauthor:: Olaya Alvarez Tunon
: file Scan.cfg
"""

def to_radians(angle):
    """Converts units of 1/16th of a gradian to radians.

    Args:
        angle: Angle in units of 1/16th of a gradian.

    Returns:
        Angle in radians.
    """
    return angle / 3200.0 * math.pi


gen = ParameterGenerator()

# Add available sonar options.
gen.add("prf_alt", bool_t, 0, "Scan alternative or continuous", False)
gen.add("scanright", bool_t, 0, "Rotate clockwise", True)
gen.add("inverted", bool_t, 0, "Upside down", False)
gen.add("range", double_t, 0, "Range in meters", 1.0, 2, 100)
gen.add("left_limit", double_t, 0, "Left limit in rad",
        to_radians(0), 0, 2 * math.pi)
gen.add("right_limit", double_t, 0, "Right limit in rad",
        to_radians(6399), 0, 2 * math.pi)
gen.add("adc_threshold", double_t, 0, "Maximum amplitude in dB", 50, 0, 255)
gen.add("filt_gain", double_t, 0, "percentage of AGC gain", 0, 0, 80)
gen.add("lockout", int_t, 0, "time for receiver to start sampling", 250, 0, 500)
gen.add("mo_time", int_t, 0, "Motor speed in microseconds", 250, 0, 2550)
gen.add("gain", double_t, 0, "Gain", 0.50, 0, 1)
gen.add("speed", double_t, 0, "Speed of sound", 1500, 1400, 1600)
gen.add("port_enabled", bool_t, 0, "enable/disable port", True)
gen.add("profiler_port_baudrate", int_t,0,"transmitting baudrate for port",115200,9600,115200)
gen.add("profiler_port", str_t,0,"Profiler serial port","/dev/ttyUSB0")



# Add step size resolution options.
resolutions = gen.enum([
    gen.const("LOWEST", double_t, to_radians(255), "Lowest resolution"),
    gen.const("LOWER", double_t, to_radians(128), "Lower resolution"),
    gen.const("LOWERISH", double_t, to_radians(64), "Lowerish resolution"),
    gen.const("LOW", double_t, to_radians(32), "Low resolution"),
    gen.const("MEDIUM", double_t, to_radians(24), "Medium resolution"),
    gen.const("HIGH", double_t, to_radians(16), "High resolution"),
    gen.const("ULTIMATE", double_t, to_radians(8), "Ultimate resolution")
], "Default resolution enumeration")
gen.add("step", double_t, 0, "Motor step size in rad",
        to_radians(8), to_radians(1), to_radians(255),
        edit_method=resolutions)

exit(gen.generate("tritech_micron", "tritech_micron", "Scan"))
